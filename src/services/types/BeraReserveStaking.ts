/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BeraReserveStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "OHM"
      | "claim"
      | "contractBalance"
      | "distributor"
      | "epoch"
      | "forfeit"
      | "giveLockBonus"
      | "index"
      | "locker"
      | "manager"
      | "pullManagement"
      | "pushManagement"
      | "rebase"
      | "renounceManagement"
      | "returnLockBonus"
      | "sOHM"
      | "setContract"
      | "setWarmup"
      | "stake"
      | "toggleDepositLock"
      | "totalBonus"
      | "totalStaked"
      | "unstake"
      | "unstakeFor"
      | "warmupContract"
      | "warmupInfo"
      | "warmupPeriod"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipPulled" | "OwnershipPushed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "OHM", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "contractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(functionFragment: "forfeit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "giveLockBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "index", values?: undefined): string;
  encodeFunctionData(functionFragment: "locker", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pullManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushManagement",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "rebase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnLockBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sOHM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setContract",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWarmup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDepositLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeFor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "warmupContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "warmupInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "warmupPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "OHM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forfeit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "giveLockBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "index", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pullManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnLockBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sOHM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWarmup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleDepositLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstakeFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "warmupContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "warmupInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "warmupPeriod",
    data: BytesLike
  ): Result;
}

export namespace OwnershipPulledEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipPushedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BeraReserveStaking extends BaseContract {
  connect(runner?: ContractRunner | null): BeraReserveStaking;
  waitForDeployment(): Promise<this>;

  interface: BeraReserveStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  OHM: TypedContractMethod<[], [string], "view">;

  claim: TypedContractMethod<[_recipient: AddressLike], [void], "nonpayable">;

  contractBalance: TypedContractMethod<[], [bigint], "view">;

  distributor: TypedContractMethod<[], [string], "view">;

  epoch: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        length: bigint;
        number: bigint;
        endBlock: bigint;
        distribute: bigint;
      }
    ],
    "view"
  >;

  forfeit: TypedContractMethod<[], [void], "nonpayable">;

  giveLockBonus: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  index: TypedContractMethod<[], [bigint], "view">;

  locker: TypedContractMethod<[], [string], "view">;

  manager: TypedContractMethod<[], [string], "view">;

  pullManagement: TypedContractMethod<[], [void], "nonpayable">;

  pushManagement: TypedContractMethod<
    [newOwner_: AddressLike],
    [void],
    "nonpayable"
  >;

  rebase: TypedContractMethod<[], [void], "nonpayable">;

  renounceManagement: TypedContractMethod<[], [void], "nonpayable">;

  returnLockBonus: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  sOHM: TypedContractMethod<[], [string], "view">;

  setContract: TypedContractMethod<
    [_contract: BigNumberish, _address: AddressLike],
    [void],
    "nonpayable"
  >;

  setWarmup: TypedContractMethod<
    [_warmupPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<
    [_amount: BigNumberish, _recipient: AddressLike],
    [boolean],
    "nonpayable"
  >;

  toggleDepositLock: TypedContractMethod<[], [void], "nonpayable">;

  totalBonus: TypedContractMethod<[], [bigint], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  unstake: TypedContractMethod<
    [_amount: BigNumberish, _trigger: boolean],
    [void],
    "nonpayable"
  >;

  unstakeFor: TypedContractMethod<
    [_recipient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  warmupContract: TypedContractMethod<[], [string], "view">;

  warmupInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        deposit: bigint;
        gons: bigint;
        expiry: bigint;
        lock: boolean;
      }
    ],
    "view"
  >;

  warmupPeriod: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "OHM"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[_recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "distributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "epoch"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        length: bigint;
        number: bigint;
        endBlock: bigint;
        distribute: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "forfeit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "giveLockBonus"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "index"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "locker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pullManagement"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pushManagement"
  ): TypedContractMethod<[newOwner_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rebase"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceManagement"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "returnLockBonus"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sOHM"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setContract"
  ): TypedContractMethod<
    [_contract: BigNumberish, _address: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWarmup"
  ): TypedContractMethod<[_warmupPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [_amount: BigNumberish, _recipient: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleDepositLock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalBonus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<
    [_amount: BigNumberish, _trigger: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unstakeFor"
  ): TypedContractMethod<
    [_recipient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "warmupContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "warmupInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        deposit: bigint;
        gons: bigint;
        expiry: bigint;
        lock: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "warmupPeriod"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "OwnershipPulled"
  ): TypedContractEvent<
    OwnershipPulledEvent.InputTuple,
    OwnershipPulledEvent.OutputTuple,
    OwnershipPulledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipPushed"
  ): TypedContractEvent<
    OwnershipPushedEvent.InputTuple,
    OwnershipPushedEvent.OutputTuple,
    OwnershipPushedEvent.OutputObject
  >;

  filters: {
    "OwnershipPulled(address,address)": TypedContractEvent<
      OwnershipPulledEvent.InputTuple,
      OwnershipPulledEvent.OutputTuple,
      OwnershipPulledEvent.OutputObject
    >;
    OwnershipPulled: TypedContractEvent<
      OwnershipPulledEvent.InputTuple,
      OwnershipPulledEvent.OutputTuple,
      OwnershipPulledEvent.OutputObject
    >;

    "OwnershipPushed(address,address)": TypedContractEvent<
      OwnershipPushedEvent.InputTuple,
      OwnershipPushedEvent.OutputTuple,
      OwnershipPushedEvent.OutputObject
    >;
    OwnershipPushed: TypedContractEvent<
      OwnershipPushedEvent.InputTuple,
      OwnershipPushedEvent.OutputTuple,
      OwnershipPushedEvent.OutputObject
    >;
  };
}
