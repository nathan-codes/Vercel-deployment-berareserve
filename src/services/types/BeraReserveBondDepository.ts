/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace OlympusBondDepository {
  export type TermsStruct = {
    controlVariable: BigNumberish;
    vestingTerm: BigNumberish;
    minimumPrice: BigNumberish;
    maxPayout: BigNumberish;
    fee: BigNumberish;
    maxDebt: BigNumberish;
  };

  export type TermsStructOutput = [
    controlVariable: bigint,
    vestingTerm: bigint,
    minimumPrice: bigint,
    maxPayout: bigint,
    fee: bigint,
    maxDebt: bigint
  ] & {
    controlVariable: bigint;
    vestingTerm: bigint;
    minimumPrice: bigint;
    maxPayout: bigint;
    fee: bigint;
    maxDebt: bigint;
  };
}

export interface BeraReserveBondDepositoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DAO"
      | "OHM"
      | "adjustment"
      | "bondCalculator"
      | "bondInfo"
      | "bondPrice"
      | "bondPriceInUSD"
      | "currentDebt"
      | "debtDecay"
      | "debtRatio"
      | "deposit"
      | "getBondInfo"
      | "getTerms"
      | "initializeBondTerms"
      | "isLiquidityBond"
      | "lastDecay"
      | "maxPayout"
      | "payoutFor"
      | "pendingPayoutFor"
      | "percentVestedFor"
      | "policy"
      | "principle"
      | "pullManagement"
      | "pushManagement"
      | "recoverLostToken"
      | "redeem"
      | "renounceManagement"
      | "setAdjustment"
      | "setBondTerms"
      | "setStaking"
      | "staking"
      | "stakingHelper"
      | "standardizedDebtRatio"
      | "terms"
      | "totalDebt"
      | "treasury"
      | "useHelper"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BondCreated"
      | "BondPriceChanged"
      | "BondRedeemed"
      | "ControlVariableAdjustment"
      | "OwnershipPulled"
      | "OwnershipPushed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "DAO", values?: undefined): string;
  encodeFunctionData(functionFragment: "OHM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adjustment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bondPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bondPriceInUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtDecay", values?: undefined): string;
  encodeFunctionData(functionFragment: "debtRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getTerms", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initializeBondTerms",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidityBond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastDecay", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxPayout", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutFor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingPayoutFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "percentVestedFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "policy", values?: undefined): string;
  encodeFunctionData(functionFragment: "principle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pullManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushManagement",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverLostToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdjustment",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondTerms",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStaking",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakingHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "standardizedDebtRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "terms", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "useHelper", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OHM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adjustment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bondInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondPriceInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtDecay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debtRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBondInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTerms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeBondTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidityBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastDecay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxPayout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingPayoutFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "percentVestedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "policy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "principle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pullManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverLostToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "standardizedDebtRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "terms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "useHelper", data: BytesLike): Result;
}

export namespace BondCreatedEvent {
  export type InputTuple = [
    deposit: BigNumberish,
    payout: BigNumberish,
    expires: BigNumberish,
    priceInUSD: BigNumberish
  ];
  export type OutputTuple = [
    deposit: bigint,
    payout: bigint,
    expires: bigint,
    priceInUSD: bigint
  ];
  export interface OutputObject {
    deposit: bigint;
    payout: bigint;
    expires: bigint;
    priceInUSD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BondPriceChangedEvent {
  export type InputTuple = [
    priceInUSD: BigNumberish,
    internalPrice: BigNumberish,
    debtRatio: BigNumberish
  ];
  export type OutputTuple = [
    priceInUSD: bigint,
    internalPrice: bigint,
    debtRatio: bigint
  ];
  export interface OutputObject {
    priceInUSD: bigint;
    internalPrice: bigint;
    debtRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BondRedeemedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    payout: BigNumberish,
    remaining: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    payout: bigint,
    remaining: bigint
  ];
  export interface OutputObject {
    recipient: string;
    payout: bigint;
    remaining: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ControlVariableAdjustmentEvent {
  export type InputTuple = [
    initialBCV: BigNumberish,
    newBCV: BigNumberish,
    adjustment: BigNumberish,
    addition: boolean
  ];
  export type OutputTuple = [
    initialBCV: bigint,
    newBCV: bigint,
    adjustment: bigint,
    addition: boolean
  ];
  export interface OutputObject {
    initialBCV: bigint;
    newBCV: bigint;
    adjustment: bigint;
    addition: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipPulledEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipPushedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BeraReserveBondDepository extends BaseContract {
  connect(runner?: ContractRunner | null): BeraReserveBondDepository;
  waitForDeployment(): Promise<this>;

  interface: BeraReserveBondDepositoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DAO: TypedContractMethod<[], [string], "view">;

  OHM: TypedContractMethod<[], [string], "view">;

  adjustment: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        add: boolean;
        rate: bigint;
        target: bigint;
        buffer: bigint;
        lastBlock: bigint;
      }
    ],
    "view"
  >;

  bondCalculator: TypedContractMethod<[], [string], "view">;

  bondInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        amountBonded: bigint;
        payout: bigint;
        vesting: bigint;
        lastBlock: bigint;
        pricePaid: bigint;
      }
    ],
    "view"
  >;

  bondPrice: TypedContractMethod<[], [bigint], "view">;

  bondPriceInUSD: TypedContractMethod<[], [bigint], "view">;

  currentDebt: TypedContractMethod<[], [bigint], "view">;

  debtDecay: TypedContractMethod<[], [bigint], "view">;

  debtRatio: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [_amount: BigNumberish, _maxPrice: BigNumberish, _depositor: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getBondInfo: TypedContractMethod<
    [_depositor: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        amountBonded: bigint;
        payout: bigint;
        vesting: bigint;
        lastBlock: bigint;
        pricePaid: bigint;
      }
    ],
    "view"
  >;

  getTerms: TypedContractMethod<
    [],
    [OlympusBondDepository.TermsStructOutput],
    "view"
  >;

  initializeBondTerms: TypedContractMethod<
    [
      _controlVariable: BigNumberish,
      _vestingTerm: BigNumberish,
      _minimumPrice: BigNumberish,
      _maxPayout: BigNumberish,
      _fee: BigNumberish,
      _maxDebt: BigNumberish,
      _initialDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isLiquidityBond: TypedContractMethod<[], [boolean], "view">;

  lastDecay: TypedContractMethod<[], [bigint], "view">;

  maxPayout: TypedContractMethod<[], [bigint], "view">;

  payoutFor: TypedContractMethod<[_value: BigNumberish], [bigint], "view">;

  pendingPayoutFor: TypedContractMethod<
    [_depositor: AddressLike],
    [bigint],
    "view"
  >;

  percentVestedFor: TypedContractMethod<
    [_depositor: AddressLike],
    [bigint],
    "view"
  >;

  policy: TypedContractMethod<[], [string], "view">;

  principle: TypedContractMethod<[], [string], "view">;

  pullManagement: TypedContractMethod<[], [void], "nonpayable">;

  pushManagement: TypedContractMethod<
    [newOwner_: AddressLike],
    [void],
    "nonpayable"
  >;

  recoverLostToken: TypedContractMethod<
    [_token: AddressLike],
    [boolean],
    "nonpayable"
  >;

  redeem: TypedContractMethod<
    [recipient: AddressLike, _stake: boolean],
    [bigint],
    "nonpayable"
  >;

  renounceManagement: TypedContractMethod<[], [void], "nonpayable">;

  setAdjustment: TypedContractMethod<
    [
      _addition: boolean,
      _increment: BigNumberish,
      _target: BigNumberish,
      _buffer: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setBondTerms: TypedContractMethod<
    [_parameter: BigNumberish, _input: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStaking: TypedContractMethod<
    [_staking: AddressLike, _helper: boolean],
    [void],
    "nonpayable"
  >;

  staking: TypedContractMethod<[], [string], "view">;

  stakingHelper: TypedContractMethod<[], [string], "view">;

  standardizedDebtRatio: TypedContractMethod<[], [bigint], "view">;

  terms: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        controlVariable: bigint;
        vestingTerm: bigint;
        minimumPrice: bigint;
        maxPayout: bigint;
        fee: bigint;
        maxDebt: bigint;
      }
    ],
    "view"
  >;

  totalDebt: TypedContractMethod<[], [bigint], "view">;

  treasury: TypedContractMethod<[], [string], "view">;

  useHelper: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DAO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OHM"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adjustment"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        add: boolean;
        rate: bigint;
        target: bigint;
        buffer: bigint;
        lastBlock: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bondCalculator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bondInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        amountBonded: bigint;
        payout: bigint;
        vesting: bigint;
        lastBlock: bigint;
        pricePaid: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bondPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bondPriceInUSD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "debtDecay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "debtRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_amount: BigNumberish, _maxPrice: BigNumberish, _depositor: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBondInfo"
  ): TypedContractMethod<
    [_depositor: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        amountBonded: bigint;
        payout: bigint;
        vesting: bigint;
        lastBlock: bigint;
        pricePaid: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTerms"
  ): TypedContractMethod<[], [OlympusBondDepository.TermsStructOutput], "view">;
  getFunction(
    nameOrSignature: "initializeBondTerms"
  ): TypedContractMethod<
    [
      _controlVariable: BigNumberish,
      _vestingTerm: BigNumberish,
      _minimumPrice: BigNumberish,
      _maxPayout: BigNumberish,
      _fee: BigNumberish,
      _maxDebt: BigNumberish,
      _initialDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isLiquidityBond"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastDecay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxPayout"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "payoutFor"
  ): TypedContractMethod<[_value: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingPayoutFor"
  ): TypedContractMethod<[_depositor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "percentVestedFor"
  ): TypedContractMethod<[_depositor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "policy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "principle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pullManagement"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pushManagement"
  ): TypedContractMethod<[newOwner_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recoverLostToken"
  ): TypedContractMethod<[_token: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [recipient: AddressLike, _stake: boolean],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceManagement"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdjustment"
  ): TypedContractMethod<
    [
      _addition: boolean,
      _increment: BigNumberish,
      _target: BigNumberish,
      _buffer: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBondTerms"
  ): TypedContractMethod<
    [_parameter: BigNumberish, _input: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStaking"
  ): TypedContractMethod<
    [_staking: AddressLike, _helper: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "staking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakingHelper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "standardizedDebtRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "terms"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        controlVariable: bigint;
        vestingTerm: bigint;
        minimumPrice: bigint;
        maxPayout: bigint;
        fee: bigint;
        maxDebt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "useHelper"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "BondCreated"
  ): TypedContractEvent<
    BondCreatedEvent.InputTuple,
    BondCreatedEvent.OutputTuple,
    BondCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BondPriceChanged"
  ): TypedContractEvent<
    BondPriceChangedEvent.InputTuple,
    BondPriceChangedEvent.OutputTuple,
    BondPriceChangedEvent.OutputObject
  >;
  getEvent(
    key: "BondRedeemed"
  ): TypedContractEvent<
    BondRedeemedEvent.InputTuple,
    BondRedeemedEvent.OutputTuple,
    BondRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "ControlVariableAdjustment"
  ): TypedContractEvent<
    ControlVariableAdjustmentEvent.InputTuple,
    ControlVariableAdjustmentEvent.OutputTuple,
    ControlVariableAdjustmentEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipPulled"
  ): TypedContractEvent<
    OwnershipPulledEvent.InputTuple,
    OwnershipPulledEvent.OutputTuple,
    OwnershipPulledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipPushed"
  ): TypedContractEvent<
    OwnershipPushedEvent.InputTuple,
    OwnershipPushedEvent.OutputTuple,
    OwnershipPushedEvent.OutputObject
  >;

  filters: {
    "BondCreated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      BondCreatedEvent.InputTuple,
      BondCreatedEvent.OutputTuple,
      BondCreatedEvent.OutputObject
    >;
    BondCreated: TypedContractEvent<
      BondCreatedEvent.InputTuple,
      BondCreatedEvent.OutputTuple,
      BondCreatedEvent.OutputObject
    >;

    "BondPriceChanged(uint256,uint256,uint256)": TypedContractEvent<
      BondPriceChangedEvent.InputTuple,
      BondPriceChangedEvent.OutputTuple,
      BondPriceChangedEvent.OutputObject
    >;
    BondPriceChanged: TypedContractEvent<
      BondPriceChangedEvent.InputTuple,
      BondPriceChangedEvent.OutputTuple,
      BondPriceChangedEvent.OutputObject
    >;

    "BondRedeemed(address,uint256,uint256)": TypedContractEvent<
      BondRedeemedEvent.InputTuple,
      BondRedeemedEvent.OutputTuple,
      BondRedeemedEvent.OutputObject
    >;
    BondRedeemed: TypedContractEvent<
      BondRedeemedEvent.InputTuple,
      BondRedeemedEvent.OutputTuple,
      BondRedeemedEvent.OutputObject
    >;

    "ControlVariableAdjustment(uint256,uint256,uint256,bool)": TypedContractEvent<
      ControlVariableAdjustmentEvent.InputTuple,
      ControlVariableAdjustmentEvent.OutputTuple,
      ControlVariableAdjustmentEvent.OutputObject
    >;
    ControlVariableAdjustment: TypedContractEvent<
      ControlVariableAdjustmentEvent.InputTuple,
      ControlVariableAdjustmentEvent.OutputTuple,
      ControlVariableAdjustmentEvent.OutputObject
    >;

    "OwnershipPulled(address,address)": TypedContractEvent<
      OwnershipPulledEvent.InputTuple,
      OwnershipPulledEvent.OutputTuple,
      OwnershipPulledEvent.OutputObject
    >;
    OwnershipPulled: TypedContractEvent<
      OwnershipPulledEvent.InputTuple,
      OwnershipPulledEvent.OutputTuple,
      OwnershipPulledEvent.OutputObject
    >;

    "OwnershipPushed(address,address)": TypedContractEvent<
      OwnershipPushedEvent.InputTuple,
      OwnershipPushedEvent.OutputTuple,
      OwnershipPushedEvent.OutputObject
    >;
    OwnershipPushed: TypedContractEvent<
      OwnershipPushedEvent.InputTuple,
      OwnershipPushedEvent.OutputTuple,
      OwnershipPushedEvent.OutputObject
    >;
  };
}
