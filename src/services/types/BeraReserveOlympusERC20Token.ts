/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BeraReserveOlympusERC20TokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BRR_TOTAL_SUPPLY"
      | "DEFAULT_ADMIN_ROLE"
      | "DOMAIN_SEPARATOR"
      | "PERMIT_TYPEHASH"
      | "allocationLimits"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "belowTreasuryValueFees"
      | "bera"
      | "beraReservePrice"
      | "burn"
      | "burnFrom"
      | "buyFee"
      | "decayRatio"
      | "decimals"
      | "decreaseAllowance"
      | "excludeAccountFromFeesAndDecay"
      | "excludeMultipleAccountsFromDecay"
      | "excludeMultipleAccountsFromFees"
      | "feeDistributor"
      | "getMarketCap"
      | "getRoleAdmin"
      | "getTreasuryValue"
      | "grantRole"
      | "hasRole"
      | "increaseAllowance"
      | "isExcludedAccountsFromDecay"
      | "isExcludedAccountsFromFees"
      | "isFeeDisabled"
      | "lastTimeBurnt"
      | "lastTimeReceived"
      | "lastTimeStaked"
      | "lockUp"
      | "marketCap"
      | "mint"
      | "name"
      | "nonces"
      | "owner"
      | "permit"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "sellFee"
      | "setAllocationLimit"
      | "setBelowTreasuryValueFees"
      | "setBuyFee"
      | "setDecayRatio"
      | "setFeeDisabled"
      | "setFeeDistributor"
      | "setLockUp"
      | "setMarketCap"
      | "setSellFee"
      | "setStaking"
      | "setTenPercentBelowFees"
      | "setTreasuryValue"
      | "setTwentyFivePercentBelowFees"
      | "setUniswapRouter"
      | "setVault"
      | "staking"
      | "supportsInterface"
      | "symbol"
      | "tenPercentBelowFees"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "treasuryValue"
      | "twentyFivePercentBelowFees"
      | "uniswapV2Pair"
      | "updateLastStakedTime"
      | "usdc"
      | "vault"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BelowTreasuryValueFeesSet"
      | "BuyFeeUpdated"
      | "DecayRatioUpdated"
      | "ExcludeAccountsFromDecay"
      | "ExcludeAccountsFromFees"
      | "FeeDisabledUpdated"
      | "FeeDistributorUpdated"
      | "MinterAllocationSet"
      | "MultipleAccountsExcludedFromDecay"
      | "MultipleAccountsExcludedFromFees"
      | "OwnershipTransferred"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SellFeeUpdated"
      | "TenPercentBelowFeesSet"
      | "Transfer"
      | "TwentyFivePercentBelowFeesSet"
      | "UniswapRouterUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BRR_TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocationLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "belowTreasuryValueFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bera", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beraReservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buyFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decayRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeAccountFromFeesAndDecay",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeMultipleAccountsFromDecay",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeMultipleAccountsFromFees",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedAccountsFromDecay",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedAccountsFromFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFeeDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeBurnt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeReceived",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeStaked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "lockUp", values?: undefined): string;
  encodeFunctionData(functionFragment: "marketCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "sellFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAllocationLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBelowTreasuryValueFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecayRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeDisabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockUp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStaking",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTenPercentBelowFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwentyFivePercentBelowFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tenPercentBelowFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "twentyFivePercentBelowFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateLastStakedTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BRR_TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocationLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "belowTreasuryValueFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bera", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beraReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decayRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeAccountFromFeesAndDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeMultipleAccountsFromDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeMultipleAccountsFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedAccountsFromDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedAccountsFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFeeDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeBurnt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllocationLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBelowTreasuryValueFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBuyFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDecayRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLockUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMarketCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSellFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTenPercentBelowFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwentyFivePercentBelowFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tenPercentBelowFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twentyFivePercentBelowFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLastStakedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BelowTreasuryValueFeesSetEvent {
  export type InputTuple = [_fees: BigNumberish];
  export type OutputTuple = [_fees: bigint];
  export interface OutputObject {
    _fees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyFeeUpdatedEvent {
  export type InputTuple = [buyFee: BigNumberish];
  export type OutputTuple = [buyFee: bigint];
  export interface OutputObject {
    buyFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecayRatioUpdatedEvent {
  export type InputTuple = [decayRatio: BigNumberish];
  export type OutputTuple = [decayRatio: bigint];
  export interface OutputObject {
    decayRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludeAccountsFromDecayEvent {
  export type InputTuple = [account: AddressLike, isExcluded: boolean];
  export type OutputTuple = [account: string, isExcluded: boolean];
  export interface OutputObject {
    account: string;
    isExcluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludeAccountsFromFeesEvent {
  export type InputTuple = [account: AddressLike, isExcluded: boolean];
  export type OutputTuple = [account: string, isExcluded: boolean];
  export interface OutputObject {
    account: string;
    isExcluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeDisabledUpdatedEvent {
  export type InputTuple = [isFeeDisabled: boolean];
  export type OutputTuple = [isFeeDisabled: boolean];
  export interface OutputObject {
    isFeeDisabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeDistributorUpdatedEvent {
  export type InputTuple = [feeDistributor: AddressLike];
  export type OutputTuple = [feeDistributor: string];
  export interface OutputObject {
    feeDistributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterAllocationSetEvent {
  export type InputTuple = [
    minter: AddressLike,
    maxNumberOfTokens: BigNumberish
  ];
  export type OutputTuple = [minter: string, maxNumberOfTokens: bigint];
  export interface OutputObject {
    minter: string;
    maxNumberOfTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultipleAccountsExcludedFromDecayEvent {
  export type InputTuple = [accounts: AddressLike[]];
  export type OutputTuple = [accounts: string[]];
  export interface OutputObject {
    accounts: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultipleAccountsExcludedFromFeesEvent {
  export type InputTuple = [accounts: AddressLike[]];
  export type OutputTuple = [accounts: string[]];
  export interface OutputObject {
    accounts: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellFeeUpdatedEvent {
  export type InputTuple = [sellFee: BigNumberish];
  export type OutputTuple = [sellFee: bigint];
  export interface OutputObject {
    sellFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TenPercentBelowFeesSetEvent {
  export type InputTuple = [fees: BigNumberish];
  export type OutputTuple = [fees: bigint];
  export interface OutputObject {
    fees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TwentyFivePercentBelowFeesSetEvent {
  export type InputTuple = [fees: BigNumberish];
  export type OutputTuple = [fees: bigint];
  export interface OutputObject {
    fees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UniswapRouterUpdatedEvent {
  export type InputTuple = [router: AddressLike];
  export type OutputTuple = [router: string];
  export interface OutputObject {
    router: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BeraReserveOlympusERC20Token extends BaseContract {
  connect(runner?: ContractRunner | null): BeraReserveOlympusERC20Token;
  waitForDeployment(): Promise<this>;

  interface: BeraReserveOlympusERC20TokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BRR_TOTAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  PERMIT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  allocationLimits: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  belowTreasuryValueFees: TypedContractMethod<[], [bigint], "view">;

  bera: TypedContractMethod<[], [string], "view">;

  beraReservePrice: TypedContractMethod<[], [bigint], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  burnFrom: TypedContractMethod<
    [account_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyFee: TypedContractMethod<[], [bigint], "view">;

  decayRatio: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  excludeAccountFromFeesAndDecay: TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;

  excludeMultipleAccountsFromDecay: TypedContractMethod<
    [accounts: AddressLike[], excluded: boolean],
    [void],
    "nonpayable"
  >;

  excludeMultipleAccountsFromFees: TypedContractMethod<
    [accounts: AddressLike[], excluded: boolean],
    [void],
    "nonpayable"
  >;

  feeDistributor: TypedContractMethod<[], [string], "view">;

  getMarketCap: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTreasuryValue: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isExcludedAccountsFromDecay: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  isExcludedAccountsFromFees: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  isFeeDisabled: TypedContractMethod<[], [boolean], "view">;

  lastTimeBurnt: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  lastTimeReceived: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  lastTimeStaked: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  lockUp: TypedContractMethod<[], [string], "view">;

  marketCap: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [account_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  sellFee: TypedContractMethod<[], [bigint], "view">;

  setAllocationLimit: TypedContractMethod<
    [minter: AddressLike, maxNumberOfTokens: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBelowTreasuryValueFees: TypedContractMethod<
    [_fees: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBuyFee: TypedContractMethod<[_buyFee: BigNumberish], [void], "nonpayable">;

  setDecayRatio: TypedContractMethod<
    [_decayRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeDisabled: TypedContractMethod<
    [_isFeeDisabled: boolean],
    [void],
    "nonpayable"
  >;

  setFeeDistributor: TypedContractMethod<
    [_feeDistributor: AddressLike],
    [void],
    "nonpayable"
  >;

  setLockUp: TypedContractMethod<
    [lockUp_: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setMarketCap: TypedContractMethod<
    [_marketCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSellFee: TypedContractMethod<
    [_sellFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStaking: TypedContractMethod<
    [staking_: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setTenPercentBelowFees: TypedContractMethod<
    [_fees: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasuryValue: TypedContractMethod<
    [_treasuryValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTwentyFivePercentBelowFees: TypedContractMethod<
    [_fees: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUniswapRouter: TypedContractMethod<
    [router: AddressLike],
    [void],
    "nonpayable"
  >;

  setVault: TypedContractMethod<[vault_: AddressLike], [boolean], "nonpayable">;

  staking: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tenPercentBelowFees: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner_: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryValue: TypedContractMethod<[], [bigint], "view">;

  twentyFivePercentBelowFees: TypedContractMethod<[], [bigint], "view">;

  uniswapV2Pair: TypedContractMethod<[], [string], "view">;

  updateLastStakedTime: TypedContractMethod<
    [_staker: AddressLike],
    [void],
    "nonpayable"
  >;

  usdc: TypedContractMethod<[], [string], "view">;

  vault: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BRR_TOTAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERMIT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allocationLimits"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "belowTreasuryValueFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bera"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "beraReservePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decayRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "excludeAccountFromFeesAndDecay"
  ): TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "excludeMultipleAccountsFromDecay"
  ): TypedContractMethod<
    [accounts: AddressLike[], excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "excludeMultipleAccountsFromFees"
  ): TypedContractMethod<
    [accounts: AddressLike[], excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMarketCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTreasuryValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isExcludedAccountsFromDecay"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExcludedAccountsFromFees"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isFeeDisabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastTimeBurnt"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastTimeReceived"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastTimeStaked"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockUp"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "marketCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [account_: AddressLike, amount_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAllocationLimit"
  ): TypedContractMethod<
    [minter: AddressLike, maxNumberOfTokens: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBelowTreasuryValueFees"
  ): TypedContractMethod<[_fees: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBuyFee"
  ): TypedContractMethod<[_buyFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDecayRatio"
  ): TypedContractMethod<[_decayRatio: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeDisabled"
  ): TypedContractMethod<[_isFeeDisabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeDistributor"
  ): TypedContractMethod<[_feeDistributor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLockUp"
  ): TypedContractMethod<[lockUp_: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketCap"
  ): TypedContractMethod<[_marketCap: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSellFee"
  ): TypedContractMethod<[_sellFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStaking"
  ): TypedContractMethod<[staking_: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setTenPercentBelowFees"
  ): TypedContractMethod<[_fees: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryValue"
  ): TypedContractMethod<[_treasuryValue: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTwentyFivePercentBelowFees"
  ): TypedContractMethod<[_fees: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUniswapRouter"
  ): TypedContractMethod<[router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVault"
  ): TypedContractMethod<[vault_: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "staking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tenPercentBelowFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "twentyFivePercentBelowFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "uniswapV2Pair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateLastStakedTime"
  ): TypedContractMethod<[_staker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BelowTreasuryValueFeesSet"
  ): TypedContractEvent<
    BelowTreasuryValueFeesSetEvent.InputTuple,
    BelowTreasuryValueFeesSetEvent.OutputTuple,
    BelowTreasuryValueFeesSetEvent.OutputObject
  >;
  getEvent(
    key: "BuyFeeUpdated"
  ): TypedContractEvent<
    BuyFeeUpdatedEvent.InputTuple,
    BuyFeeUpdatedEvent.OutputTuple,
    BuyFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DecayRatioUpdated"
  ): TypedContractEvent<
    DecayRatioUpdatedEvent.InputTuple,
    DecayRatioUpdatedEvent.OutputTuple,
    DecayRatioUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ExcludeAccountsFromDecay"
  ): TypedContractEvent<
    ExcludeAccountsFromDecayEvent.InputTuple,
    ExcludeAccountsFromDecayEvent.OutputTuple,
    ExcludeAccountsFromDecayEvent.OutputObject
  >;
  getEvent(
    key: "ExcludeAccountsFromFees"
  ): TypedContractEvent<
    ExcludeAccountsFromFeesEvent.InputTuple,
    ExcludeAccountsFromFeesEvent.OutputTuple,
    ExcludeAccountsFromFeesEvent.OutputObject
  >;
  getEvent(
    key: "FeeDisabledUpdated"
  ): TypedContractEvent<
    FeeDisabledUpdatedEvent.InputTuple,
    FeeDisabledUpdatedEvent.OutputTuple,
    FeeDisabledUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeDistributorUpdated"
  ): TypedContractEvent<
    FeeDistributorUpdatedEvent.InputTuple,
    FeeDistributorUpdatedEvent.OutputTuple,
    FeeDistributorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MinterAllocationSet"
  ): TypedContractEvent<
    MinterAllocationSetEvent.InputTuple,
    MinterAllocationSetEvent.OutputTuple,
    MinterAllocationSetEvent.OutputObject
  >;
  getEvent(
    key: "MultipleAccountsExcludedFromDecay"
  ): TypedContractEvent<
    MultipleAccountsExcludedFromDecayEvent.InputTuple,
    MultipleAccountsExcludedFromDecayEvent.OutputTuple,
    MultipleAccountsExcludedFromDecayEvent.OutputObject
  >;
  getEvent(
    key: "MultipleAccountsExcludedFromFees"
  ): TypedContractEvent<
    MultipleAccountsExcludedFromFeesEvent.InputTuple,
    MultipleAccountsExcludedFromFeesEvent.OutputTuple,
    MultipleAccountsExcludedFromFeesEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SellFeeUpdated"
  ): TypedContractEvent<
    SellFeeUpdatedEvent.InputTuple,
    SellFeeUpdatedEvent.OutputTuple,
    SellFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TenPercentBelowFeesSet"
  ): TypedContractEvent<
    TenPercentBelowFeesSetEvent.InputTuple,
    TenPercentBelowFeesSetEvent.OutputTuple,
    TenPercentBelowFeesSetEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TwentyFivePercentBelowFeesSet"
  ): TypedContractEvent<
    TwentyFivePercentBelowFeesSetEvent.InputTuple,
    TwentyFivePercentBelowFeesSetEvent.OutputTuple,
    TwentyFivePercentBelowFeesSetEvent.OutputObject
  >;
  getEvent(
    key: "UniswapRouterUpdated"
  ): TypedContractEvent<
    UniswapRouterUpdatedEvent.InputTuple,
    UniswapRouterUpdatedEvent.OutputTuple,
    UniswapRouterUpdatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BelowTreasuryValueFeesSet(uint256)": TypedContractEvent<
      BelowTreasuryValueFeesSetEvent.InputTuple,
      BelowTreasuryValueFeesSetEvent.OutputTuple,
      BelowTreasuryValueFeesSetEvent.OutputObject
    >;
    BelowTreasuryValueFeesSet: TypedContractEvent<
      BelowTreasuryValueFeesSetEvent.InputTuple,
      BelowTreasuryValueFeesSetEvent.OutputTuple,
      BelowTreasuryValueFeesSetEvent.OutputObject
    >;

    "BuyFeeUpdated(uint256)": TypedContractEvent<
      BuyFeeUpdatedEvent.InputTuple,
      BuyFeeUpdatedEvent.OutputTuple,
      BuyFeeUpdatedEvent.OutputObject
    >;
    BuyFeeUpdated: TypedContractEvent<
      BuyFeeUpdatedEvent.InputTuple,
      BuyFeeUpdatedEvent.OutputTuple,
      BuyFeeUpdatedEvent.OutputObject
    >;

    "DecayRatioUpdated(uint256)": TypedContractEvent<
      DecayRatioUpdatedEvent.InputTuple,
      DecayRatioUpdatedEvent.OutputTuple,
      DecayRatioUpdatedEvent.OutputObject
    >;
    DecayRatioUpdated: TypedContractEvent<
      DecayRatioUpdatedEvent.InputTuple,
      DecayRatioUpdatedEvent.OutputTuple,
      DecayRatioUpdatedEvent.OutputObject
    >;

    "ExcludeAccountsFromDecay(address,bool)": TypedContractEvent<
      ExcludeAccountsFromDecayEvent.InputTuple,
      ExcludeAccountsFromDecayEvent.OutputTuple,
      ExcludeAccountsFromDecayEvent.OutputObject
    >;
    ExcludeAccountsFromDecay: TypedContractEvent<
      ExcludeAccountsFromDecayEvent.InputTuple,
      ExcludeAccountsFromDecayEvent.OutputTuple,
      ExcludeAccountsFromDecayEvent.OutputObject
    >;

    "ExcludeAccountsFromFees(address,bool)": TypedContractEvent<
      ExcludeAccountsFromFeesEvent.InputTuple,
      ExcludeAccountsFromFeesEvent.OutputTuple,
      ExcludeAccountsFromFeesEvent.OutputObject
    >;
    ExcludeAccountsFromFees: TypedContractEvent<
      ExcludeAccountsFromFeesEvent.InputTuple,
      ExcludeAccountsFromFeesEvent.OutputTuple,
      ExcludeAccountsFromFeesEvent.OutputObject
    >;

    "FeeDisabledUpdated(bool)": TypedContractEvent<
      FeeDisabledUpdatedEvent.InputTuple,
      FeeDisabledUpdatedEvent.OutputTuple,
      FeeDisabledUpdatedEvent.OutputObject
    >;
    FeeDisabledUpdated: TypedContractEvent<
      FeeDisabledUpdatedEvent.InputTuple,
      FeeDisabledUpdatedEvent.OutputTuple,
      FeeDisabledUpdatedEvent.OutputObject
    >;

    "FeeDistributorUpdated(address)": TypedContractEvent<
      FeeDistributorUpdatedEvent.InputTuple,
      FeeDistributorUpdatedEvent.OutputTuple,
      FeeDistributorUpdatedEvent.OutputObject
    >;
    FeeDistributorUpdated: TypedContractEvent<
      FeeDistributorUpdatedEvent.InputTuple,
      FeeDistributorUpdatedEvent.OutputTuple,
      FeeDistributorUpdatedEvent.OutputObject
    >;

    "MinterAllocationSet(address,uint256)": TypedContractEvent<
      MinterAllocationSetEvent.InputTuple,
      MinterAllocationSetEvent.OutputTuple,
      MinterAllocationSetEvent.OutputObject
    >;
    MinterAllocationSet: TypedContractEvent<
      MinterAllocationSetEvent.InputTuple,
      MinterAllocationSetEvent.OutputTuple,
      MinterAllocationSetEvent.OutputObject
    >;

    "MultipleAccountsExcludedFromDecay(address[])": TypedContractEvent<
      MultipleAccountsExcludedFromDecayEvent.InputTuple,
      MultipleAccountsExcludedFromDecayEvent.OutputTuple,
      MultipleAccountsExcludedFromDecayEvent.OutputObject
    >;
    MultipleAccountsExcludedFromDecay: TypedContractEvent<
      MultipleAccountsExcludedFromDecayEvent.InputTuple,
      MultipleAccountsExcludedFromDecayEvent.OutputTuple,
      MultipleAccountsExcludedFromDecayEvent.OutputObject
    >;

    "MultipleAccountsExcludedFromFees(address[])": TypedContractEvent<
      MultipleAccountsExcludedFromFeesEvent.InputTuple,
      MultipleAccountsExcludedFromFeesEvent.OutputTuple,
      MultipleAccountsExcludedFromFeesEvent.OutputObject
    >;
    MultipleAccountsExcludedFromFees: TypedContractEvent<
      MultipleAccountsExcludedFromFeesEvent.InputTuple,
      MultipleAccountsExcludedFromFeesEvent.OutputTuple,
      MultipleAccountsExcludedFromFeesEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SellFeeUpdated(uint256)": TypedContractEvent<
      SellFeeUpdatedEvent.InputTuple,
      SellFeeUpdatedEvent.OutputTuple,
      SellFeeUpdatedEvent.OutputObject
    >;
    SellFeeUpdated: TypedContractEvent<
      SellFeeUpdatedEvent.InputTuple,
      SellFeeUpdatedEvent.OutputTuple,
      SellFeeUpdatedEvent.OutputObject
    >;

    "TenPercentBelowFeesSet(uint256)": TypedContractEvent<
      TenPercentBelowFeesSetEvent.InputTuple,
      TenPercentBelowFeesSetEvent.OutputTuple,
      TenPercentBelowFeesSetEvent.OutputObject
    >;
    TenPercentBelowFeesSet: TypedContractEvent<
      TenPercentBelowFeesSetEvent.InputTuple,
      TenPercentBelowFeesSetEvent.OutputTuple,
      TenPercentBelowFeesSetEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TwentyFivePercentBelowFeesSet(uint256)": TypedContractEvent<
      TwentyFivePercentBelowFeesSetEvent.InputTuple,
      TwentyFivePercentBelowFeesSetEvent.OutputTuple,
      TwentyFivePercentBelowFeesSetEvent.OutputObject
    >;
    TwentyFivePercentBelowFeesSet: TypedContractEvent<
      TwentyFivePercentBelowFeesSetEvent.InputTuple,
      TwentyFivePercentBelowFeesSetEvent.OutputTuple,
      TwentyFivePercentBelowFeesSetEvent.OutputObject
    >;

    "UniswapRouterUpdated(address)": TypedContractEvent<
      UniswapRouterUpdatedEvent.InputTuple,
      UniswapRouterUpdatedEvent.OutputTuple,
      UniswapRouterUpdatedEvent.OutputObject
    >;
    UniswapRouterUpdated: TypedContractEvent<
      UniswapRouterUpdatedEvent.InputTuple,
      UniswapRouterUpdatedEvent.OutputTuple,
      UniswapRouterUpdatedEvent.OutputObject
    >;
  };
}
